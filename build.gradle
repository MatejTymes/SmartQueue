buildscript {
    repositories {
        jcenter()
    }
}

apply plugin: 'java'
apply plugin: 'idea'

idea {
    project {
        jdkName = '1.11'
        languageLevel = '1.11'
    }
}
compileJava {
    sourceCompatibility = 1.11
    targetCompatibility = 1.11
}

repositories {
    mavenCentral()
}

sourceSets {
    testInfrastructure {
        java {
            srcDir 'src/test-infrastructure/java'
        }
        resources {
            srcDir 'src/test-infrastructure/resources'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    integrationTest {
        java {
            srcDir 'src/test-integration/java'
        }
        resources {
            srcDir 'src/test-integration/resources'
        }
        compileClasspath += sourceSets.main.output + sourceSets.testInfrastructure.output
        runtimeClasspath += sourceSets.main.output + sourceSets.testInfrastructure.output
    }

    systemTest {
        java {
            srcDir 'src/test-system/java'
        }
        resources {
            srcDir 'src/test-systems/resources'
        }
        compileClasspath += sourceSets.main.output + sourceSets.testInfrastructure.output
        runtimeClasspath += sourceSets.main.output + sourceSets.testInfrastructure.output
    }
}

configurations {
    testInfrastructureImplementation.extendsFrom testImplementation
    testInfrastructureRuntimeOnly.extendsFrom runtimeOnly
    integrationTestImplementation.extendsFrom testInfrastructureImplementation
    systemTestImplementation.extendsFrom testInfrastructureImplementation
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

task systemTest(type: Test) {
    description = 'Runs system tests.'
    group = 'verification'

    testClassesDirs = sourceSets.systemTest.output.classesDirs
    classpath = sourceSets.systemTest.runtimeClasspath
    shouldRunAfter test
}

integrationTest.outputs.upToDateWhen { false }
systemTest.outputs.upToDateWhen { false }

check.dependsOn integrationTest
check.dependsOn systemTest
integrationTest.mustRunAfter test
systemTest.mustRunAfter test

dependencies {
    compile 'commons-io:commons-io:2.5'
    compile 'com.google.guava:guava:20.0'
    compile 'com.github.matejtymes:javafixes:1.3.3'

    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'ch.qos.logback:logback-classic:1.1.9'

    compile 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.8'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.8'

    compile 'org.mongodb:mongo-java-driver:3.12.1'
    compile 'com.sparkjava:spark-core:2.6.0'

    testCompile 'com.github.cschoell:junit-dynamicsuite:0.2.5'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-core:2.8.47'
    testCompile 'org.skyscreamer:jsonassert:1.5.0'

    testInfrastructureCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0'

    integrationTestCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0'
//    stabilityTestCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.1.1'
    systemTestCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.2.0'

    systemTestCompile 'org.asynchttpclient:async-http-client:2.0.35'
//    systemTestCompile 'javax.ws.rs:javax.ws.rs-api:2.1'
    systemTestCompile 'org.jboss.resteasy:resteasy-jaxrs:3.1.4.Final'


    testCompile sourceSets.testInfrastructure.output
    integrationTestCompile sourceSets.testInfrastructure.output
//    stabilityTestCompile sourceSets.testInfrastructure.output
    systemTestCompile sourceSets.testInfrastructure.output
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '6.8.3'
//}

tasks.withType(Test) {
    useJUnitPlatform()
    reports.html.setDestination(file("${reporting.baseDir}/${name}"))
}